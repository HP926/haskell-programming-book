types == datatypes

Types - Expressions, when evaluated, reduce to values

Haskell uses Integral and Fractional numbers

Integral
  Int smaller
  Integers bigger

Use Integer


Fractional
  float
  double
  rational
  scientific

True && True
not (True && True)


False || True
not ((8 > 4) || (4 > 5))


Find the Mistakes
1. not True && True
2. not (x = 6) x is not defined, use == for comparison
3. (1 * 2) > 5 
4. ["Merry"] > ["Happy"] use quotes
5. [1, 2, 3] ++ "look at me!"


Tuples - a type that allows you to store and pass around multiple values within a single value

List - 
  all elements of a list must be of the same type. 
  lists have their own distinct [] syntax. Like the tuple syntax, it is used for both the type constructor in type signatures and at the term level to express list values.
  the number of values that will be in the list isnâ€™t specified in the type

Chapter Exercises
1. length :: [a] -> Int
2 a. 5
  b. 3
  c. 2
  d. 5
3. first one good, second one fails length returns Int
4. use div operator div (6 :: Int) (length [1, 2, 3])
5. Bool expression - True
6. False :: Bool - False
7. a works comparing two Int
   b. error, List of mixed values 
   c. works 
   d. works
   e. error, 9 does not evaluate to True
8.
isPalindrome :: (Eq a) => [a] -> Bool
isPalindrome x = reverse x == x

9.
myAbs :: Integer -> Integer
myAbs x = 
  if x > 0 
    then x 
  else abs x

myAbs :: Integer -> Integer
myAbs x = 
  if x < 0 
    then (-x) 
  else x

10.
f :: (a, b) -> (c, d) -> ((b, d), (a, c)) 
f firstTup secondTup = ((snd firstTup, snd secondTup), (fst firstTup, fst secondTup))

Correcting syntax
1. 
x = (+)

f xs = x w 1
  where w = length xs

2. 
\x = x

3.
func (a, b) = a

Match the function names to their types
1. c Show a => a -> String
2. b Eq a => a -> a -> Bool
3. a) (a, b) -> a
4  d) (+) :: Num a => a -> a -> a
